#!/usr/bin/perl

use strict;
use warnings;

use feature ':5.10';

use Carp;
use IO::Handle;
use JSON::XS;
use List::Util qw(sum max min);
use Data::Dumper;
use Getopt::Long;

use Client;
use Tools  qw( normalize_planet );

autoflush STDOUT 1;
autoflush STDERR 1;

my %opts;
GetOptions(\%opts,
    'config|c=s',
    'dry-run|n',
    'help|h!',
    'quiet|q!',
    'verbose|v!',
    'planet|p=s@',
    'interval|i|s|sleep=i',
    'keep-hours|kh=f',
    'keep-units|ku=f',
    'min-percent|min=f',
    'max-percent|max=f',
) or die usage();

# Ensure we have some kind of threshold
unless ( grep { $opts{$_} } qw( keep-hours keep-kilos min-percent max-percent ) ) {
    die usage();
}

# check for list of planets to work on
my %do_planets;
if ($opts{planet}) {
    %do_planets = map { normalize_planet($_) => 1 } @{$opts{planet}};
}

# instantiate the client and get initial status
my $config = $opts{config} || shift @ARGV || 'config.json' ;
my $client = Client->new(config => $config);
my $empire = $client->empire_status();

# Take $empire->{planets} and turn it inside-out, but cross-reference %do_planets to
# 1) get a hash of only the planets we care about; or
# 2) get a hash of *all* planets
my $grep = ( keys %do_planets )
    ? sub { exists $do_planets{ normalize_planet( $empire->{planets}{$_} ) } }
    : sub { 1 }
;
my %planets =
        map  { $empire->{planets}{$_} => $_ }
        grep { $grep->($_) }
        keys %{ $empire->{planets} }
;

# If we have a list of planets to work on, we only want to do those planets; otherwise, we do all planets.
%do_planets = map {  $empire->{planets}{$_}, $_ } keys %{$empire->{planets}} unless ( keys %do_planets );

do {
    for my $planet_name ( keys %do_planets ) {
        output("Checking waste stores on $planet_name");

        my $s = $client->body_status($planets{$planet_name});

        # use opts to determine the largest minimum waste / smallest maximum waste threshholds
        my $minimum_waste = max(
            ( $opts{'keep-hours'}  ? abs( $s->{waste_hour}     * $opts{'keep-hours'}  ) : () ),
            ( $opts{'keep-units'}  ? $opts{'keep-units'}                                : () ),
            ( $opts{'min-percent'} ? int( $s->{waste_capacity} * $opts{'min-percent'} ) : () ),
        );
        my $maximum_waste =
            ( $opts{'max-percent'} ? int( $s->{waste_capacity} * $opts{'max-percent'} ) : $s->{waste_capacity}  );

        verbose("keeping waste between $minimum_waste and $maximum_waste units");
        if ($s->{waste_hour} < 0) { # we're burning waste
            output("Waste rate is negative (-)");

            my $hours_left = sprintf('%0.2f', -1 * $s->{waste_stored} / $s->{waste_hour});
            output("We have $hours_left hours ($s->{waste_stored} units) of waste stored");

            if ( $s->{waste_stored} < $minimum_waste ) {
                verbose("We have less than our threshold of $minimum_waste units of waste");
                make_waste( $s, $minimum_waste - $s->{waste_stored} );
            }
            else {
                verbose("We have more than enough waste stored; do nothing");
            }
        }
        elsif ($s->{waste_hour} > 0) { # we are making waste already
            output("Waste rate is positive (+)");

            my $hours_full = sprintf('%0.2f',
                ( $s->{waste_capacity} - $s->{waste_stored} ) / $s->{waste_hour}
            );
            output("$hours_full hours until waste is full");

            if ( $opts{'max-percent'} ) {
                verbose("Attempting to keep keep waste under $opts{'max-percent'}");
                waste_disposal( $s );
            }
        }
        else {
            output("You have attained waste zen.");
        }

        output("$planet_name ... done");
        # grab the buildings on this planet
        my $building_status = $client->body_buildings($planets{$planet_name});
        my $buildings = $building_status->{buildings};
    }
    output(
        scalar(localtime(time)),
        ' All planets are done.',
        ($opts{interval}?" Sleeping $opts{interval} minutes":''),
    );
} while ( $opts{interval} && sleep( $opts{interval} * 60 ) );

exit(0);

sub usage {
    return qq{$0: usage TBD};
}

sub make_waste {
    my ($s, $limit) = @_;

    verbose("Need to create $limit units of waste");
    output("Gathering resource information");

    my %resources = map { $_ => $s->{"${_}_stored"} } qw( food water energy ore );

    verbose( 'current resources: ', Dumper( \%resources ) );

    my %resource_dump = proportionalize( $limit, \%resources );
    verbose("proportionalized dump: ",Dumper( \%resource_dump ) );

    # get the storage facilities on this planet
    my $body_buildings = $client->body_buildings($s->{id})->{'buildings'};
    my %seen;
    my %storage_facilities =
        map  { $body_buildings->{$_}{type} => +{ %{ $body_buildings->{$_} }, id => $_ } }
        grep {
            my ($type) = map { lc $_ } ($body_buildings->{$_}{name} =~ /^(\w+) (?:Storage|Reserve)/);
            ( $type && !$seen{$type} )
                ? ($seen{$type},$body_buildings->{$_}{type}) = (1,$type) # yes, this is sneaking a new key into items we want
                : 0
        }
        keys %{$body_buildings};

    verbose('storage facilities: ',Dumper(\%storage_facilities));
    dump_resource( $storage_facilities{$_}, $_, $resource_dump{ $_ } ) for ( keys %resource_dump );
    unlink("cache/codon/body/$s->{id}/status");
}

sub dump_resource {
    my ($building, $type, $amount) = @_;

    verbose( 'building: ',Dumper( $building ) );
    output("Dump $amount units of $type");
    given ($type) {
        when ('energy') {
            $client->call('energyreserve','dump',$building->{id}, $amount) unless $opts{'dry-run'};
        }
        when ('water') {
            $client->call('waterstorage','dump',$building->{id}, $amount) unless $opts{'dry-run'};
        }
        when ('food') {
            my $food_stored = $client->call('foodreserve','view',$building->{id})->{'food_stored'};
            my %food_types = proportionalize($amount, $food_stored);
            while ( my ($specifically, $amount) = each %food_types ) {
                output("Dumping $amount units of $specifically");
                $client->call('foodreserve','dump',$building->{id}, $specifically, $amount) unless $opts{'dry-run'};
            }
        }
        when ('ore') {
            my $ore_stored = $client->call('orestorage','view',$building->{id})->{'ore_stored'};
            my %ore_types = proportionalize($amount, $ore_stored);
            while ( my ($specifically, $amount) = each %ore_types ) {
                output("Dumping $amount units of $specifically");
                $client->call('orestorage','dump',$building->{id}, $specifically, $amount) unless $opts{'dry-run'};
            }
        }
        default {
            output("I don't know how to dump $type\n");
        }
    }
}

sub waste_disposal {
    my ($s) = @_;
    warn "Waste disposal not implemented yet\n";
}

sub proportionalize {
    my ($limit, $resources) = @_;

    verbose("Proportionalizing $limit units between @{[ scalar keys %$resources ]} resource types");
    # Let's see what we're looking at...sorted by amount, descending
    my @types  = sort { $resources->{$b} <=> $resources->{$a} } keys   %$resources;

    # we still have to dump $limit's worth
    my $remainder = $limit;
    my %dump_amount;
    for my $ii ( 0 .. $#types - 1) {
        # Initialize the amount we want to dump
        $dump_amount{ $types[$ii] } = 0;

        # How much do we have between our current type and the next most plentiful type?
        my $diff = $resources->{ $types[$ii] } - $resources->{ $types[$ii + 1] };
        verbose( "diff between $types[$ii] and $types[$ii + 1] is $diff" );
        # If that difference is greater than what we still need to dump, only dump
        # what we still need to in order to hit the limit
        my $amount = ( $diff > $remainder ) ? $remainder : $diff;
        verbose( "split $amount between @{[ scalar keys %dump_amount ]} resources" );
        # divide that amount by the total number of things that we have queued to dump
        $amount = int( ( $amount ) / scalar keys %dump_amount )||1;
        $dump_amount{ $_ } += $amount for keys %dump_amount;

        verbose( "current split: ",Dumper(\%dump_amount) );
        if ( (my $dumped = sum( values %dump_amount )) >= $limit ) { # we've dumped enough waste
            verbose("accumulated dump amount: $dumped; done");
            # we're done
            last;
        }
        else {
            # subtract out the dumped amount from the remainder
            $remainder = $limit - $dumped;
            verbose("accumulated dump amount: $dumped; $remainder units remaining to be dumped");
        }
    }

    return %dump_amount;
}

sub verbose {
    return unless $opts{verbose};
    print @_,"\n";
}

sub output {
    return if $opts{quiet};
    print @_,"\n";
}

__END__


        my $body_buildings = $client->body_buildings($s->{id});

        # Start by determining how much we waste we want to generate
        my $dump_total = $s->{'waste_hour'} * $limit;

        my %seen;
        my @storage_facilities =
            sort { $b->{"$b->{type}_percent"} <=> $a->{"$a->{type}_percent"} }
            map  { +{ %{ $body_buildings->{$_} }, id => $_ }        }
            grep {
                my ($type) = map lc, $body_buildings->{$_}{name} =~ /^(\w+) Storage|Reserve/;
                ( $type && !$seen{$type} ) # yes, this is sneaking a new key into items we want
                    ? ($seen{$type},$body_buildings->{$_}{type}) = (1,$type)
                    : 0
            }
            keys %$body_buildings;

        for my $facility ( @storage_facilities ) {
            given ($facility->{type}) {
                when ('energy') {
                    output("Dump $dump_amount{$facility->{type}} units of energy");
                    $client->call('energyreserve','dump',$dump_amount{ $facility->{type} }) unless $opts{'dry-run'};
                }
                when ('water') {
                    $client->call('waterstorage','dump',$dump_amount{ $facility->{type} }) unless $opts{'dry-run'};
                }
                when ('food') {
                    dump_food( $facility, $dump_amount{ $facility->{type} } );
                }
                when ('ore') {
                    dump_ore( $facility, $dump_amount{ $facility->{type} } );
                }
            }
        }
    }
